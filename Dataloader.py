import torchvision
import os
import torch
from Wavelet_Data import Wavelet_Dataset
from torch.utils.data.dataloader import DataLoader

mean =  [
5.456352588681378e-06,
5.366520933814911e-06,
6.589651558042045e-06,
3.90341782350846e-06,
2.325427078692965e-06,
3.954307539971062e-06,
6.708430035948057e-06,
5.807719255922646e-06,
1.9501620965467023e-06,
2.0936999111938182e-06,
6.182214484018387e-06,
8.533911667784333e-06,
5.856244855642012e-06,
3.093458601155251e-06,
6.329091313381327e-06,
9.223499306751235e-06,
9.384498559565643e-06,
7.0213910584381005e-06,
7.260330863420031e-06,
1.0445651971941786e-05,
3.821702759160867e-06,
1.3384285716038467e-05,
1.1698149230525493e-05,
1.0484898166799271e-05,
1.2155812792643255e-05,
1.570149298152321e-05,
1.477709756861106e-05,
1.673422454549828e-05,
1.5905894419688417e-05,
1.69210993844458e-05,
1.5649816375404373e-05,
6.098201057619744e-06,
4.284198295173999e-06,
4.284024475349372e-06,
5.984593090830854e-06,
5.341851128625431e-06,
2.6895673794051773e-06,
2.837034173862528e-06,
4.951123437447531e-06,
7.5651691311718655e-06,
3.977832001539805e-06,
4.2178031309212066e-06,
7.680044926264693e-06,
7.3188728391211416e-06,
4.058005352143433e-06,
4.285080807609704e-06,
7.834812741613623e-06,
1.0648304816829404e-05,
8.244257637129513e-06,
6.732981860110966e-06,
8.982047637656152e-06,
1.2056157489744732e-05,
1.2713320795609921e-05,
1.065805049112206e-05,
1.0828128261025289e-05,
1.4359290221608316e-05,
1.6274352862683002e-05,
1.517448022201086e-05,
1.4405313470652629e-05,
1.550477155564866e-05,
1.824030333898225e-05
]

dev = [
5.373162448383683e-06,
5.283089009738163e-06,
6.530537238309238e-06,
3.743924407158743e-06,
2.3868736469465164e-06,
3.8045863504992363e-06,
6.741017939247244e-06,
5.8274678920645715e-06,
1.8715235521786114e-06,
2.094995443142222e-06,
6.298297256348731e-06,
8.913115397204475e-06,
6.197602627953313e-06,
3.5262924588594682e-06,
6.820528074144615e-06,
9.924527500022138e-06,
1.0473340318721916e-05,
8.062130935100366e-06,
8.701187303359499e-06,
1.1883703304925828e-05,
3.8555035140638735e-06,
1.6161229347580566e-05,
1.42318393037073e-05,
1.3030190872613248e-05,
1.4696010736923069e-05,
1.9328052668880794e-05,
1.8082771546554077e-05,
2.1039179688805806e-05,
2.0163602850619522e-05,
2.1596477553151393e-05,
1.8992906019912232e-05,
5.988149404185483e-06,
4.27379328561309e-06,
4.209219687762004e-06,
5.8622300335970925e-06,
5.384338886005099e-06,
2.667140747210698e-06,
2.9049027041216386e-06,
4.6869682258534615e-06,
7.654525400780476e-06,
3.854184780269786e-06,
4.167999080142839e-06,
7.919648604700662e-06,
7.6272077258353155e-06,
4.5322145345632074e-06,
4.788885469783962e-06,
8.341655941054132e-06,
1.177466904186666e-05,
9.370696890944102e-06,
8.087704724750815e-06,
1.0376001923427355e-05,
1.4073497759152891e-05,
1.5410799502859123e-05,
1.303983600035659e-05,
1.3150676228316935e-05,
1.7413343466106218e-05,
2.0595213506045294e-05,
1.8991911820290772e-05,
1.798473029979268e-05,
1.9575870910259994e-05,
2.3478426823443693e-05
]

data_transforms = {
    'train': torchvision.transforms.Compose([
        torchvision.transforms.Normalize(mean=mean,std=dev)
    ]),
    'val': torchvision.transforms.Compose([
        torchvision.transforms.Normalize(mean=mean,std=dev)
    ]),
}


def wavelet_collate(batch):
    """
    custom collate function for turning a batch of wavelet data types into
    (batch_size)x61x32x250 TENSORS
    
    Args:
        Batch: batch of Wavelet Data tensors
    
    Returns:
        tuple: (Wavelet_Dataset(sample(index)), target) where target is class_index of the target class.
    """
    data = torch.stack([item[0] for item in batch])  # just form a tensor
    target = [item[1] for item in batch]
    target = torch.LongTensor(target)
    return [data, target]

"""
def wavelet_dataloader(data_dir, batch_size: int, shuffle=False, transform = None):
    
    Custom data loader returns DataLoader of Wavelet_Dataset types
    
    Args:
        root: path to data. ex: "Dataset/1sec_seg_training_class_fif_5000"
        batch_size: batch size
        shuffle: shuffle data
    Returns:
        Dataloader with time Wavelet_Dataset data
    

    dataset = Wavelet_Dataset(data_dir, )

    return DataLoader(dataset=dataset, batch_size = batch_size, collate_fn = wavelet_collate, shuffle=shuffle, num_workers=0, pin_memory=True)
"""
#data loader
#motion_dataloader(dataset=motion_datasets[x], batch_size=batch_size, shuffle=True)
def wavelet_dataloader(dataset, batch_size: int, shuffle=False):
    """
    Custom data loader returns DataLoader for Motion Dataset
    `1
    Args:
        root: path to data. ex: ~/SMNI_TRAINTEST_DATA/train/
    batch_size: batch size
        shuffle: shuffle data
    Returns:
        Dataloader with time frequency/frequency data
    """
    return DataLoader(dataset=dataset, collate_fn=wavelet_collate, batch_size=batch_size, shuffle=shuffle, pin_memory=True)
